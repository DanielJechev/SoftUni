package com.company;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Main {
   private static int firstRow=0;
 private static    int firstCol=0;
   private static int secondRow=0;
   private static int secondCol=0;
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int rows=Integer.parseInt(reader.readLine());
        char[][]matrix=inicilization(reader,rows);





        boolean isFirstPlayerAlive=true;
        boolean isSecondPlayerAlive=true;
        while (isFirstPlayerAlive&&isSecondPlayerAlive){
           String[] tokens=reader.readLine().split(" ");
           String command=tokens[0];
           String otherCommnand=tokens[1];


        isFirstPlayerAlive=    moveFirstPlayer(command,matrix);

        if (!isFirstPlayerAlive){
            break;
        }
        isSecondPlayerAlive=    moveSecondPlayer(otherCommnand,matrix);
        }

        for (int r = 0; r <matrix.length ; r++) {
            for (int c = 0; c <matrix[r].length ; c++) {
                System.out.print(matrix[r][c]+ "");
            }
            System.out.println();
        }

    }

    private static char[][] inicilization(BufferedReader reader, int rows)  throws IOException {
        char[][] matrix=new char[rows][rows];
        for (int r = 0; r <rows ; r++) {
            char []line=reader.readLine().toCharArray();
            for (int c = 0; c < rows; c++) {
char element= line[c];
matrix[r][c]=element;

                if (element=='f') {
                    firstRow = r;
                    firstCol = c;
                }
                if (element=='s') {
                    secondRow = r;
                    secondCol = c;
                }
            }
        }
return matrix;
    }


    private static boolean moveSecondPlayer(String otherCommnad, char[][] matrix) {
        int newPositionRow=secondRow;
        int newPositionCol=secondCol;
        boolean isAlive=true;
        if (otherCommnad.equals("up")){
            newPositionRow=newPositionRow==0?matrix.length-1:newPositionRow-1;
        }else if (otherCommnad.equals("down")){
            newPositionRow=newPositionRow==matrix.length-1?0:newPositionRow+1;
        }else if (otherCommnad.equals("left")){
            if (newPositionCol==0){
                newPositionCol=matrix.length-1;
            }else {
                newPositionCol=newPositionCol-1;
            }
        }else if (otherCommnad.equals("right")) {
            if (newPositionCol==matrix.length-1){
                newPositionCol=0;
            }else {
                newPositionCol=newPositionCol+1;
            }
        }
        char newElement=matrix[newPositionRow][newPositionCol];
        if (newElement=='f'){
            matrix[newPositionRow][newPositionCol]='x';
            isAlive=false;
        }else {
            matrix[newPositionRow][newPositionCol]='s';
        }



       secondRow=newPositionRow;
       secondCol=newPositionCol;





return isAlive;
    }

    private static boolean moveFirstPlayer(String commnad, char[][] matrix) {
        int newPositionRow=firstRow;
        int newPositionCol=firstCol;
boolean isAlive=true;
        if (commnad.equals("up")){
            if (newPositionRow==0){
                newPositionRow=matrix.length-1;
            }else {
                newPositionRow--;
            }

        }else if (commnad.equals("down")){
            if (newPositionRow==matrix.length-1){
                newPositionRow=0;
            }else {
                newPositionRow++;
            }

        }else if (commnad.equals("left")){
            if(newPositionCol==0){
                newPositionCol=matrix.length-1;
            }else {
                newPositionCol--;
            }




        }else if (commnad.equals("right")){
            if(newPositionCol==matrix.length-1){
                newPositionCol=0;
            }else {
                newPositionCol++;
            }

        }
char newElement=matrix[newPositionRow][newPositionCol];
        if (newElement=='s'){
            matrix[newPositionRow][newPositionCol]='x';
            isAlive=false;
        }else {
            matrix[newPositionRow][newPositionCol]='f';
        }

        firstRow=newPositionRow;
        firstCol=newPositionCol;
        return isAlive;
    }
}


