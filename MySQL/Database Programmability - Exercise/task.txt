Create stored procedure usp_get_employees_salary_above_35000
that returns all employees’ first and last names for whose salary is above 35000.
The result should be sorted by first_name then by last_name alphabetically, and id ascending.

CREATE PROCEDURE usp_get_employees_salary_above_35000()
	BEGIN
		SELECT first_name, last_name
        FROM employees
        WHERE salary > 35000
        ORDER BY first_name, last_name, employee_id;
   END 
------------------------------------------------------------------------------------------------------------------------------------------
Create stored procedure usp_get_employees_salary_above that accept a number as parameter and
return all employees’ first and last names whose salary is above or equal to the given number.
The result should be sorted by first_name then by last_name alphabetically and id ascending. 

CREATE PROCEDURE usp_get_employees_salary_above(salary_value DOUBLE)
	BEGIN
		SELECT first_name, last_name
        FROM employees
        WHERE salary >= salary_value
        ORDER BY first_name, last_name, employee_id;
   END 
------------------------------------------------------------------------------------------------------------------------------------------
Write a stored procedure usp_get_towns_starting_with that accept string as parameter and
returns all town names starting with that string.
The result should be sorted by town_name alphabetically. 

CREATE PROCEDURE usp_get_towns_starting_with(town_name VARCHAR(20))
		BEGIN
			SELECT t.name
            FROM towns t
            WHERE t.name LIKE CONCAT(town_name, '%')
            ORDER BY t.name;
		END
------------------------------------------------------------------------------------------------------------------------------------------
Write a stored procedure usp_get_employees_from_town that accepts town_name as parameter and
return the employees’ first and last name that live in the given town.
The result should be sorted by first_name then by last_name alphabetically and id ascending. 

CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(20))
		BEGIN
			SELECT e.first_name, e.last_name
            FROM employees e
            JOIN addresses a
            ON e.address_id = a.address_id
            JOIN towns t
            ON a.town_id = t.town_id
            WHERE t.name = town_name
            ORDER BY e.first_name, e.last_name, e.employee_id;
		END
------------------------------------------------------------------------------------------------------------------------------------------
Write a function ufn_get_salary_level that receives salary of an employee and returns the level of the salary.
•	If salary is < 30000 return “Low”
•	If salary is between 30000 and 50000 (inclusive) return “Average”
•	If salary is > 50000 return “High”

CREATE FUNCTION ufn_get_salary_level(employee_salary DOUBLE(10,4))
RETURNS VARCHAR(8)
	BEGIN
		DECLARE result VARCHAR(8);
        IF employee_salary < 30000 THEN SET result = 'Low';
        ELSEIF employee_salary BETWEEN 30000 AND 50000 THEN SET result = 'Average';
        ELSE SET result = 'High';
        END IF;
        
        RETURN result;
	END 
------------------------------------------------------------------------------------------------------------------------------------------
Write a stored procedure usp_get_employees_by_salary_level that receive as parameter level of salary (low, average or high) and
print the names of all employees that have given level of salary.
The result should be sorted by first_name then by last_name both in descending order.

CREATE FUNCTION ufn_get_salary_level(employee_salary DOUBLE(10,4))
RETURNS VARCHAR(8)
	BEGIN
		DECLARE result VARCHAR(8);
        IF employee_salary < 30000 THEN SET result = 'Low';
        ELSEIF employee_salary BETWEEN 30000 AND 50000 THEN SET result = 'Average';
        ELSE SET result = 'High';
        END IF;
        
        RETURN result;
	END; 


CREATE PROCEDURE usp_get_employees_by_salary_level(level_of_salary VARCHAR(8))
	BEGIN
		SELECT first_name, last_name
        FROM employees
        WHERE ufn_get_salary_level(salary) = level_of_salary
        ORDER BY first_name DESC, last_name DESC;
	END;
------------------------------------------------------------------------------------------------------------------------------------------
Define a function ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))  that returns 
true or false depending on that if the word is a comprised of the given set of letters. 

CREATE FUNCTION ufn_is_word_comprised(set_of_letters VARCHAR(50), word VARCHAR(50))
RETURNS INT
	BEGIN
		DECLARE indx INT;
        DECLARE symbol VARCHAR(1);
        SET indx := 1;
        
        WHILE indx <= CHAR_LENGTH(word)  DO
        SET symbol := SUBSTRING(word, indx, 1);
        IF LOCATE(symbol, set_of_letters) = 0 THEN RETURN 0;
        END IF;
        SET indx := indx + 1;
        END WHILE;
		RETURN 1;
	END;
